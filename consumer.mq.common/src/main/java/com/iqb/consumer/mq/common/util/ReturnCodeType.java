package com.iqb.consumer.mq.common.util;import java.util.EnumSet;import java.util.HashMap;import java.util.Map;import org.slf4j.LoggerFactory;/** * 投资返回码 * @author jack * */public enum ReturnCodeType {	 		AI000000("000000", "没有提供的返回码", "操作失败，请联系技术支持人员"),//自定义			//推送饭饭	ASSET_PUSH_01030001("asset_01030001", "asset推送信息为空", "信息不完整"),    ASSET_PUSH_01030002("asset_01030002", "数据库中不存在传入的order id", "系统异常，请联系管理员"),    ASSET_PUSH_01030003("asset_01030003", "asset推送至其他系统代码抛异常", "数据已推送"),    ASSET_PUSH_01030004("asset_01030004", "asset推送至其他系统抛异常", "找不到推送平台"),    ASSET_PUSH_01030005("asset_01030005", "asset推送至其他系统抛异常", "此标已存在,不需要再次同步"),    ASSET_PUSH_01030006("asset_01030006", "asset推送至其他系统抛异常", "传入的参数为空"),    ASSET_PUSH_01030007("asset_01030007", "asset申请日期大于剩余日期", "申请日期大于剩余日期"),	ASSET_PUSH_01030008("asset_01030008", "推送至爱钱帮标的信息失败", "推送至爱钱帮标的信息失败"),	ASSET_PUSH_01030009("asset_01030009", "推送标的信息至爱钱帮返回orderId为空", "推送标的信息至爱钱帮返回orderId为空");	/** 响应代码 **/	private String retCode = "";		/** 提示信息-用户提示信息 **/	private String retInfo = "";		/** 响应码含义-实际响应信息 **/	private String retCodeInfo = "";		    /**     *      * @param retCode 响应代码     * @param retCodeInfo 响应码含义-实际响应信息      * @param promptInfo  提示信息-用户提示信息     */	private ReturnCodeType(String retCode, String retCodeInfo, String retInfo) {		this.retCode = retCode;		this.retCodeInfo = retCodeInfo;		this.retInfo = retInfo;	}	public String getRetCode() {		return retCode;	}	public void setRetCode(String retCode) {		this.retCode = retCode;	}	public String getRetCodeInfo() {		return retCodeInfo;	}	public void setRetCodeInfo(String retCodeInfo) {		this.retCodeInfo = retCodeInfo;	}	public String getRetInfo() {		return retInfo;	}	public void setRetInfo(String retInfo) {		this.retInfo = retInfo;	}	/**	 * 通过响应代码 获取对应的ReturnCodeType 当没有对应值时See CA000000	 * @param retCode-返回码	 * @return 响应枚举类型	 */	public static ReturnCodeType getReturnCodeTypeByCode(String retCode) {		if(map.get(retCode)!=null){			return map.get(retCode);		}else{			LoggerFactory.getLogger(ReturnCodeType.class).error(new StringBuffer("投资返回错误码不存在:").append(retCode).toString());			return ReturnCodeType.AI000000;		}	}	    /**     * 重写toString     */	public String toString() {		return new StringBuffer("{retCode:").append(retCode)				.append(";retCodeInfo(响应信息):").append(retCodeInfo)				.append(";retInfo(客户提示信息):").append(retInfo).append("}").toString();	}	/**存放全部枚举的缓存对象*/	private static Map<String,ReturnCodeType> map = new HashMap<String,ReturnCodeType>();	/**将所有枚举缓存*/	static{		EnumSet<ReturnCodeType> currEnumSet = EnumSet				.allOf(ReturnCodeType.class);		for (ReturnCodeType retCodeType : currEnumSet) {			map.put(retCodeType.getRetCode(), retCodeType);		}	}	}